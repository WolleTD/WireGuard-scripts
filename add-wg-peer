#!/bin/bash -e
# Interactively add a new peer to a WireGuard configuration
# This script is build for systemd-networkd's netdev-files,
# but should be easily convertible for wg-quick
#   created by Eicke Herbertz, 2020

test_input() {
    if [[ -z "$3" ]]; then
        echo "$1 cannot be empty!"
        return 1
    fi

    if grep -q "^$2$3\$" "${NETDEV}"; then
        echo "A peer with this $1 already exists!"
        return 1
    fi
}

add_peer() {
    local name="$1"
    local peer="$2"
    local allowed_ips="$3"

    test_input "Name" "# " "${name}" 1>&2
    test_input "PublicKey" "PublicKey = " "${peer}" 1>&2
    test_input "AllowedIPs" "AllowedIPs = " "${allowed_ips}" 1>&2

    CONFIG="[WireGuardPeer]\n"
    CONFIG+="# ${name}\n"
    CONFIG+="# Added by ${SUDO_USER:-${USER}} at $(date +%F)\n"
    CONFIG+="PublicKey = ${peer}\n"
    CONFIG+="AllowedIPs = ${allowed_ips}\n"

    echo -e "${CONFIG}"

    if [[ "${YES}" != "yes" ]]; then
        echo -n "Add this configuration to ${NETDEV}? [Y/n] "
        read add
        [[ -z "${add}" || "${add}" == "y" || "${add}" == "Y" ]] || return 1
    fi

    echo -e "${CONFIG}" >> "${NETDEV}"

    # Find interface in $NETDEV
    local interface=$(awk '/Name = /{print $3}' ${NETDEV})

    # Check if interface is non-zero and actually existing
    if [[ ${INTERFACE} && -e /sys/class/net/${INTERFACE} ]]; then
        wg set ${INTERFACE} peer ${peer} allowed-ips ${allowed_ips}
    fi
}

usage() {
    echo "Usage: add-wg-peer [-y] [-f <file>] [<name> <public-key> <allowed-ips>]"
    echo "    -f <file>       systemd .netdev file to edit"
    echo "    -y              no confirmation required"
    echo "    <name>          name of the peer - requires a valid hostname"
    echo "    <public-key>    the PublicKey of the new peer"
    echo "    <allowed-ips>   AllowedIPs of the new peer"
    echo "  Without peer information, PublicKey and AllowedIPs will be queried interactively."
    exit $1
}

if [[ $UID -ne 0 && ! $WG_TEST ]]; then
    echo "Privilege elevation..." >&2
    sudo $0 $@
    exit $?
fi

# use enhanced getopt
OPTS=f:yh
LOPTS=file:,noconfirm,help
PARSED_OPTS=$(getopt -o $OPTS -l $LOPTS -n "$0" -- "$@")
eval set -- "$PARSED_OPTS"

# set defaults
DEFAULT_NETDEV=${WG_TEST_FILE:-$(ls /etc/systemd/network/*.netdev | \
                                 grep -E 'wg|wireguard' | head -1)}
NETDEV=${DEFAULT_NETDEV}
YES=n

while [[ "$1" != "--" ]]; do
    case $1 in
    -f|--file)
        NETDEV="$2"
        shift 2
        ;;
    -y|--noconfirm)
        YES=yes
        shift
        ;;
    -h|--help)
        usage
        ;;
    *)
        echo "Programming error" >&2
        exit 1
        ;;
    esac
done

# $1 is --, $2 is name, $3 is peer, $4 is allowed-ips
if [[ $# -gt 4 ]]; then
    echo "Error: Too many arguments!" >&2
    usage 1
elif [[ $# -gt 1 && $# -lt 4 ]]; then
    echo "Error: Too few arguments!" >&2
    usage 1
fi
NAME=$2
PEER=$3
ALLOWED_IPS=$4

if [[ -z "${PEER}" ]]; then
    echo "Add WireGuard peer(s) to ${NETDEV}"

    cont="y"
    while [[ "${cont}" == "y" || "${cont}" == "Y" ]]; do
        echo -n "Name: "
        read name
        test_input "Name" "# " "${name}" || continue

        echo -n "PublicKey: "
        read pubkey
        test_input "PublicKey" "PublicKey = " "${pubkey}" || continue

        echo -n "AllowedIPs (including prefix length): "
        read allowedips
        test_input "AllowedIPs" "AllowedIPs = " "${allowedips}" || continue

        echo
        ! add_peer "${name}" "${pubkey}" "${allowedips}" 2>&1
        echo -n "Add another peer? [y/N] "
        read cont
    done
else
    add_peer "${NAME}" "${PEER}" "${ALLOWED_IPS}"
fi
