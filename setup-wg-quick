#!/bin/bash -e
# Generate a WireGuard configuration for wg-quick
# Meant to easily setup large amounts of clients to a network by just
# providing individual IP addresses
# This is not sophisticated, but meant to customize or just inspire. Have fun.
#   created by Eicke Herbertz, 2020

if [[ -z "$1" ]]; then
	echo "Error! Usage: $0 <ip-addr>" >&2
	exit 1
fi
if [[ ! $UID -eq 0 ]]; then
    echo "Error! Please run as root!" >&2
    exit 1
fi
if ! command -v wg >/dev/null; then
    echo "wg tool not found. Please install wireguard(-tools) first!" >&2
    exit 1
fi

WG_NAME="wg0"
WG_CONF="/etc/wireguard/${WG_NAME}.conf"

WG_NET=${WG_NET:-172.16.0.0}
WG_CIDR=${WG_CIDR:-24}
WG_PUBKEY=${WG_PUBKEY:-YOUR_SERVERS_PUBLIC_KEY}
WG_ENDPOINT=${WG_ENDPOINT:-vpn.example.com:12345}

IP_ADDRESS=$1

# Generate keys
PRIVATE_KEY="$(wg genkey)"
PUBLIC_KEY="$(wg pubkey <<<${PRIVATE_KEY})"

# Write configuration
cat > "${WG_CONF}" <<EOF
[Interface]
PrivateKey = ${PRIVATE_KEY}
Address = ${IP_ADDRESS}/${WG_CIDR}

[Peer]
PublicKey = ${WG_PUBKEY}
AllowedIPs = ${WG_NET}/${WG_CIDR}
Endpoint = ${WG_ENDPOINT}
PersistentKeepalive = 25
EOF

# Being paranoid
unset PRIVATE_KEY

systemctl enable wg-quick@${WG_NAME}.service

if ! modprobe wireguard; then
    echo "Probably the kernel got updated. Not starting wg-quick until reboot!" >&2
else
    systemctl start wg-quick@${WG_NAME}.service
fi

echo "============================================================"
echo "WireGuard setup successful! Server side peer configuration:"
echo "[Peer]"
echo "PublickKey = ${PUBLIC_KEY}"
echo "AllowedIPs = ${IP_ADDRESS}/32"
